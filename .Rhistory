# Función para ejecutar el análisis y medir el tiempo
run_analysis <- function(data, max_vars) {
run_times <- c()
num_vars <- seq(500, max_vars, by = 500)
for (n in num_vars) {
subset_data <- data[1:n, ]
start_time <- Sys.time()
Load_data <- load_data(subset_data)
parcorData <- partial_cors(Load_data)
hcData <- hierarchical_cluster(parcor_mat = parcorData, tom = TRUE, min_module_size = 10)
cluster_assig_Data <- cluster_assignments(as.data.frame(hcData$cluster_assignments))
eigenData <- Eigengenes(subset_data, hcData$cluster_assignments[,3])
eigengenes_Data <- eigenData$module_eigenmetab_Me
end_time <- Sys.time()
run_times <- c(run_times, as.numeric(difftime(end_time, start_time, units = "secs")))
}
return(data.frame(num_vars = num_vars, run_time = run_times))
}
# Datos de ejemplo
Data1_exp= precargados_metab_expAll
Data2_exp= precargados_RNA_expAll
# Ejecutar el análisis en ambos datasets
results1 <- run_analysis(Data1_exp, nrow(Data1_exp))
# Datos de ejemplo
Data1_exp= precargados_metab_expAll
run_times <- c()
nrow(Data1_exp)
num_vars <- seq(500, 7353, by = 500)
subset_data <- Data1_exp[1:500, ]
View(subset_data)
start_time <- Sys.time()
Load_data <- load_data(subset_data)
View(Load_data)
parcorData <- partial_cors(Load_data)
hcData <- hierarchical_cluster(parcor_mat = parcorData, tom = TRUE, min_module_size = 10)
cluster_assig_Data <- cluster_assignments(as.data.frame(hcData$cluster_assignments))
eigenData <- Eigengenes(subset_data, hcData$cluster_assignments[,3])
eigenData <- Eigengenes(Load_data, hcData$cluster_assignments[,3])
# Función para ejecutar el análisis y medir el tiempo
run_analysis <- function(data, max_vars) {
run_times <- c()
num_vars <- seq(500, max_vars, by = 500)
for (n in num_vars) {
subset_data <- Data1_exp[1:n, ]
start_time <- Sys.time()
Load_data <- load_data(subset_data)
parcorData <- partial_cors(Load_data)
hcData <- hierarchical_cluster(parcor_mat = parcorData, tom = TRUE, min_module_size = 10)
cluster_assig_Data <- cluster_assignments(as.data.frame(hcData$cluster_assignments))
eigenData <- Eigengenes(Load_data, hcData$cluster_assignments[,3])
eigengenes_Data <- eigenData$module_eigenmetab_Me
end_time <- Sys.time()
run_times <- c(run_times, as.numeric(difftime(end_time, start_time, units = "secs")))
}
return(data.frame(num_vars = num_vars, run_time = run_times))
}
# Datos de ejemplo
Data1_exp= precargados_metab_expAll
Data2_exp= precargados_RNA_expAll
# Ejecutar el análisis en ambos datasets
results1 <- run_analysis(Data1_exp, nrow(Data1_exp))
results2 <- run_analysis(Data2_exp, nrow(Data2_exp))
# Combinar los resultados en un solo dataframe
results1$dataset <- "Data1"
results2$dataset <- "Data2"
combined_results <- rbind(results1, results2)
# Graficar los resultados
ggplot(combined_results, aes(x = num_vars, y = run_time, color = dataset)) +
geom_point() +
geom_line() +
labs(title = "Run Time vs Número de Variables en WGCNA",
x = "Número de Variables",
y = "Run Time (segundos)") +
theme_minimal()
Data3_exp= precargados_RNA_exp # 23000 var and 77 samples
View(combined_results)
results3 <- run_analysis(Data3_exp, nrow(Data3_exp))
# Combinar los resultados en un solo dataframe
results1$dataset <- "Data1"
results2$dataset <- "Data2"
results3$dataset <- "Data3"
combined_results <- rbind(results1, results2, , results3)
combined_results <- rbind(results1, results2, results3)
# Graficar los resultados
ggplot(combined_results, aes(x = num_vars, y = run_time, color = dataset)) +
geom_point() +
geom_line() +
labs(title = "iModMIx: Run Time vs Number of Variables",
x = "Number of Variables",
y = "Run Time (seg)") +
theme_minimal()
# Graficar los resultados
ggplot(results1, aes(x = num_vars, y = run_time, color = dataset)) +
geom_point() +
geom_line() +
labs(title = "iModMIx: Run Time vs Number of Variables",
x = "Number of Variables",
y = "Run Time (seg)") +
theme_minimal()
# Graficar los resultados
ggplot(results2, aes(x = num_vars, y = run_time, color = dataset)) +
geom_point() +
geom_line() +
labs(title = "iModMIx: Run Time vs Number of Variables",
x = "Number of Variables",
y = "Run Time (seg)") +
theme_minimal()
# Graficar los resultados
ggplot(results3, aes(x = num_vars, y = run_time, color = dataset)) +
geom_point() +
geom_line() +
labs(title = "iModMIx: Run Time vs Number of Variables",
x = "Number of Variables",
y = "Run Time (seg)") +
theme_minimal()
View(combined_results)
# Graficar los resultados
ggplot(combined_results, aes(x = num_vars, y = run_time, color = dataset)) +
geom_point() +
geom_line() +
labs(title = "iModMIx: Run Time vs Number of Variables",
x = "Number of Variables",
y = "Run Time (seg)") +
theme_minimal()
View(combined_results)
max(combined_results$run_time)
runApp()
runApp()
runApp()
shiny::runApp()
iModMix::
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
detach("package:enrichR", unload = TRUE)
library(enrichR)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Top_correlations
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(enrichR)
runApp()
devtools::check()
runApp()
runApp()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?glassoFast
devtools::document()
devtools::check()
devtools::check()
_R_CHECK_SYSTEM_CLOCK_=0
devtools::document()
devtools::check()
_R_CHECK_SYSTEM_CLOCK_=0
usethis::edit_r_environ()
_R_CHECK_SYSTEM_CLOCK_=0
shiny::runApp()
runApp()
runApp()
# Perform enrichment analysis per module
selected_database <- "GO_Biological_Process_2023"
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = hcData2$cluster_assignments,
database = selected_database)
library(iModMix)
# Load the package
library(iModMix)
# Get the path to the expression data file
path_Metab_exp <- system.file("Example_data/ccRCC4_Data/Metab_exp.rds", package = "iModMix")
# Load the expression data
Data_exp1 <- readRDS(path_Metab_exp)
# Check the expression data
Data_exp1[1:5, 1:5]
# Get the path to the Metadata file
path_Metadata <- system.file("Example_data/ccRCC4_Data/Metadata.rds", package = "iModMix")
# Load the Metadata
Metadata <- readRDS(path_Metadata)
# Check the Metadata
head(Metadata)
# Preprocess de data in the format require for iModMix
load_data1 <- load_data(Data_exp1)
load_data1[1:5, 1:5]
# Perform Partial correlation
parcorData1 <- partial_cors(load_data1, rho = 0.25)
parcorData1[1:5, 1:5]
# Perform hierarchical clustering
hcData1 <- hierarchical_cluster(parcor_mat = parcorData1, tom = TRUE, min_module_size = 10)
hcClu = hcData1$hclustTree
hcMod = as.matrix(hcData1$dynamicMods_numeric)
WGCNA::plotDendroAndColors(dendro = hcClu,
colors = hcMod,
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
groupLabels = "Modules",
main = "Feature dendrogram and module assignments")
# Perform cluster assignments
cluster_assig_Data1 <- cluster_assignments(as.data.frame(hcData1$cluster_assignments))
head(cluster_assig_Data1)
# Obtain Eigenfeatures
eigenData1 <- Eigengenes(load_data1, hcData1$cluster_assignments[,3])
eigengenes_Data1 <- eigenData1$module_eigenmetab_Me
eigengenes_Data1[1:5, 1:5]
# Get the path to the expression data file
path_RNA_exp <- system.file("Example_data/ccRCC4_Data/RNA_exp.rds", package = "iModMix")
# Load the expression data
Data_exp2 <- readRDS(path_RNA_exp)
Data_exp2 <- Data_exp2[1:1000,]
# Check the expression data
Data_exp2[1:5, 1:5]
#Preprocess de data in the format require for iModMix
load_data2 <- load_data(Data_exp2)
# Partial correlation
parcorData2 <- partial_cors(load_data2, rho = 0.25)
parcorData2[1:5, 1:5]
# Perform hierarchical clustering
hcData2 <- hierarchical_cluster(parcor_mat = parcorData2, tom = TRUE, min_module_size = 10)
# Access the hierarchical clustering tree and module assignments
hcClu2 <- hcData2$hclustTree
hcMod2 <- as.matrix(hcData2$dynamicMods_numeric)
# Plot the dendrogram
WGCNA::plotDendroAndColors(dendro = hcClu2,
colors = hcMod2,
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
groupLabels = "Modules",
main = "Feature dendrogram and module assignments")
# Perform cluster assignment
cluster_assig_Data2 <- cluster_assignments(as.data.frame(hcData2$cluster_assignments))
eigenData2 <- Eigengenes(load_data2, hcData2$cluster_assignments[,3])
eigengenes_Data2 <- eigenData2$module_eigenmetab_Me
eigengenes_Data2[1:5, 1:5]
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
# Summarize into list the diffrent egenfuatures
eigengenes_list <- list(eigengenes_Data1, eigengenes_Data2)
cluster_list <- list(hcData1$cluster_assignments, hcData2$cluster_assignments)
Integration_Data1_Data2 <- Modules_correlation(eigengenes_list, cluster_list, threshold = 0.6)
TopCorrelations <-Integration_Data1_Data2[["Top_cor_Prot_metab"]]
head(TopCorrelations)
# Plot correlation
Correlation_Plot <- Integration_Data1_Data2$Correlation_Plot
hist(Correlation_Plot[[1]], main = "Correlation: Data 1 / Data 2 ")
#Plot Network
nodes <- as.data.frame(Integration_Data1_Data2$nodes)
edges <- as.data.frame(Integration_Data1_Data2$edges)
n <- Integration_Data1_Data2$n
shapes <- c("diamond", "triangle", "dot")
colors <- c("orange", "darkgreen", "darkblue")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation", shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
# Perform enrichment analysis per module
selected_database <- "GO_Biological_Process_2023"
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = hcData2$cluster_assignments,
database = selected_database)
View(hcData2)
View(hcData2[["cluster_assignments"]])
View(cluster_assig_Data2)
# Summarize into list the diffrent egenfuatures
eigengenes_list <- list(eigengenes_Data1, eigengenes_Data2)
cluster_list <- list(cluster_assig_Data1, cluster_assig_Data2)
Integration_Data1_Data2 <- Modules_correlation(eigengenes_list, cluster_list, threshold = 0.6)
TopCorrelations <-Integration_Data1_Data2[["Top_cor_Prot_metab"]]
head(TopCorrelations)
# Plot correlation
Correlation_Plot <- Integration_Data1_Data2$Correlation_Plot
hist(Correlation_Plot[[1]], main = "Correlation: Data 1 / Data 2 ")
#Plot Network
nodes <- as.data.frame(Integration_Data1_Data2$nodes)
edges <- as.data.frame(Integration_Data1_Data2$edges)
n <- Integration_Data1_Data2$n
shapes <- c("diamond", "triangle", "dot")
colors <- c("orange", "darkgreen", "darkblue")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation", shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = cluster_assig_Data2,
database = selected_database)
library(enrichR)
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = cluster_assig_Data2,
database = selected_database)
View(cluster_assignments_Data2_enrich)
cluster_assignments_Data2_enrich[1:5,]
# Perform enrichment analysis per module
selected_database <- "GO_Biological_Process_2023"
cluster_assignments_Data2_enrich <- Assigment_genes_enrichr(cluster_assignments_ProtGenes = cluster_assig_Data2,
database = selected_database)
View(cluster_assignments_Data2_enrich)
View(cluster_assignments_Data2_enrich)
cluster_assignments_Data2_enrich[1:5,]
View(cluster_assignments_Data2_enrich)
runApp()
runApp()
library(iModMix)
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
detach("package:iModMix", unload = TRUE)
library(iModMix)
# Load the package
library(iModMix)
# Get the path to the expression data file
path_Metab_exp <- system.file("Example_data/ccRCC4_Data/Metab_exp.rds", package = "iModMix")
# Load the expression data
Data_exp1 <- readRDS(path_Metab_exp)
# Check the expression data
Data_exp1[1:5, 1:5]
# Get the path to the Metadata file
path_Metadata <- system.file("Example_data/ccRCC4_Data/Metadata.rds", package = "iModMix")
# Load the Metadata
Metadata <- readRDS(path_Metadata)
# Check the Metadata
head(Metadata)
# Preprocess de data in the format require for iModMix
load_data1 <- load_data(Data_exp1)
load_data1[1:5, 1:5]
# Perform Partial correlation
parcorData1 <- partial_cors(load_data1, rho = 0.25)
parcorData1[1:5, 1:5]
# Perform hierarchical clustering
hcData1 <- hierarchical_cluster(parcor_mat = parcorData1, tom = TRUE, min_module_size = 10)
hcClu = hcData1$hclustTree
hcMod = as.matrix(hcData1$dynamicMods_numeric)
WGCNA::plotDendroAndColors(dendro = hcClu,
colors = hcMod,
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
groupLabels = "Modules",
main = "Feature dendrogram and module assignments")
# Perform cluster assignments
cluster_assig_Data1 <- cluster_assignments(as.data.frame(hcData1$cluster_assignments))
head(cluster_assig_Data1)
# Obtain Eigenfeatures
eigenData1 <- Eigengenes(load_data1, hcData1$cluster_assignments[,3])
eigengenes_Data1 <- eigenData1$module_eigenmetab_Me
eigengenes_Data1[1:5, 1:5]
# Get the path to the expression data file
path_RNA_exp <- system.file("Example_data/ccRCC4_Data/RNA_exp.rds", package = "iModMix")
# Load the expression data
Data_exp2 <- readRDS(path_RNA_exp)
Data_exp2 <- Data_exp2[1:1000,]
# Check the expression data
Data_exp2[1:5, 1:5]
#Preprocess de data in the format require for iModMix
load_data2 <- load_data(Data_exp2)
# Perform hierarchical clustering
hcData2 <- hierarchical_cluster(parcor_mat = parcorData2, tom = TRUE, min_module_size = 10)
# Access the hierarchical clustering tree and module assignments
hcClu2 <- hcData2$hclustTree
hcMod2 <- as.matrix(hcData2$dynamicMods_numeric)
# Plot the dendrogram
WGCNA::plotDendroAndColors(dendro = hcClu2,
colors = hcMod2,
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
groupLabels = "Modules",
main = "Feature dendrogram and module assignments")
# Perform cluster assignment
cluster_assig_Data2 <- cluster_assignments(as.data.frame(hcData2$cluster_assignments))
eigenData2 <- Eigengenes(load_data2, hcData2$cluster_assignments[,3])
eigengenes_Data2 <- eigenData2$module_eigenmetab_Me
eigengenes_Data2[1:5, 1:5]
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
detach("package:iModMix", unload = TRUE)
library(iModMix)
# Perform Classification
Classification_Data <- perform_classification(eigengene_data = eigengenes_Data1,
metadata = Metadata,
phenotype_variable = "TN",
significance_threshold = 0.09)
Classification_Data$result[1:10,]
# Plot BoxPlot
selected_variable <- "TN"
levels <- unique(Metadata[[selected_variable]])
class_label <- paste(levels, collapse = " vs ")
plot <- Classification_Data$plots[[1]]
plot <- plot +
ggplot2::labs(title = class_label, fill = as.factor(levels),
x = "Variables",
y = "Class") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1)
)
plot
runApp()
runApp()
runApp()
devtools::check()
devtools::build_vignettes()
devtools::check()
runApp()
devtools::check()
devtools::check()
devtools::check()
