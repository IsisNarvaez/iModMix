feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
# Ensure all columns are numeric
feature_mat_t <- as.data.frame(feature_mat_t)
feature_mat_t[] <- lapply(feature_mat_t, as.numeric)
feature_mat_t <- as.matrix(feature_mat_t)
Expression_mat = example_data
Expression_mat$missing_count <- rowSums(is.na(Expression_mat))
feature_mat <- subset(Expression_mat, missing_count <= 0.1 * (ncol(Expression_mat) - 2))
features <- feature_mat$Feature_ID
feature_mat_t <- t(feature_mat[, -c(1, ncol(feature_mat))])
View(Expression_mat)
Expression_mat = example_data
#Expression_mat = Expression_mat
Expression_mat$missing_count <- rowSums(is.na(Expression_mat))
feature_mat <- subset(Expression_mat, missing_count <= 0.1 * (ncol(Expression_mat) - 2))
features <- feature_mat$Feature_ID
feature_mat_t <- t(feature_mat[, -c(1, ncol(feature_mat))])
colnames(feature_mat_t) <- features
feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
# Ensure all columns are numeric
feature_mat_t <- as.data.frame(feature_mat_t)
feature_mat_t[] <- lapply(feature_mat_t, as.numeric)
feature_mat_t <- as.matrix(feature_mat_t)
feature_mat_t <- as.matrix(scale(feature_mat_t))
sd_values <- apply(feature_mat_t, 2, function(x) sd(x, na.rm = TRUE))
filtered_indices <- which(sd_values > quantile(sd_values, 0.25))
View(feature_mat_t)
feature_mat_t <- if (length(filtered_indices) > 20000) {
feature_mat_t[, order(sd_values[filtered_indices], decreasing = TRUE)[1:20000]]
} else {
feature_mat_t[, filtered_indices]
}
# generate covariance matrix
cov_mat = cov(as.matrix(feature_mat_t), use = "pairwise.complete.obs")
# calculate partial correlations
glassoFast_result = glassoFast::glassoFast(cov_mat, .25, thr = 1e-04,
maxIt = 10000, start = "cold",
trace = FALSE)
# extract just partial correlation result
partial_cor_mat = glassoFast_result$wi
# set diagonal values to 0; hierarchical clustering will give an error with NA diagonal values
diag(partial_cor_mat) = NA
# set row/colnames to match feature matrix
rownames(partial_cor_mat) = colnames(feature_mat_t)
colnames(partial_cor_mat) = colnames(feature_mat_t)
# return the resulting partial correlations
return(partial_cor_mat)
View(partial_cor_mat)
View(result)
# Calculate the expected number of rows after filtering
filtered_data <- example_data[rowSums(is.na(example_data)) <= 0.1 * (ncol(example_data) - 2), ]
View(filtered_data)
# Create an example dataset
set.seed(123)
example_data <- data.frame(
Feature_ID = paste0("Gene", 1:10),
Sample1 = rnorm(10),
Sample2 = rnorm(10),
Sample3 = rnorm(10),
Sample4 = rnorm(10)
)
# Add some rows with NA values to test filtering
example_data[1, 2] <- NA
example_data[2, 3] <- NA
test_that("partial_cors returns a matrix with correct dimensions and NA diagonal", {
result <- partial_cors(example_data)
# Check that the result is a matrix
expect_true(is.matrix(result))
# Calculate the expected number of rows after filtering
filtered_data <- example_data[rowSums(is.na(example_data[, -1])) <= 0.1 * (ncol(example_data) - 2), ]
feature_mat_t <- t(filtered_data[, -c(1, ncol(filtered_data))])
feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
feature_mat_t <- as.matrix(scale(feature_mat_t))
sd_values <- apply(feature_mat_t, 2, function(x) sd(x, na.rm = TRUE))
filtered_indices <- which(sd_values > quantile(sd_values, 0.25))
expected_rows <- length(filtered_indices)
expect_equal(nrow(result), expected_rows)
expect_equal(ncol(result), expected_rows)
# Check that the diagonal contains NA
expect_true(all(is.na(diag(result))))
})
result <- partial_cors(example_data)
# Create an example dataset
set.seed(123)
example_data <- data.frame(
Feature_ID = paste0("Gene", 1:10),
Sample1 = rnorm(10),
Sample2 = rnorm(10),
Sample3 = rnorm(10),
Sample4 = rnorm(10)
)
# Add some rows with NA values to test filtering
example_data[1, 2] <- NA
example_data[2, 3] <- NA
result <- partial_cors(example_data)
View(partial_cor_mat)
result <- partial_cors(example_data)
example_data <- data.frame(
Feature_ID = paste0("Gene", 1:10),
Sample1 = rnorm(10),
Sample2 = rnorm(10),
Sample3 = rnorm(10),
Sample4 = rnorm(10)
)
# Add some rows with NA values to test filtering
example_data[1, 2] <- NA
example_data[2, 3] <- NA
# Create an example dataset
set.seed(123)
example_data <- data.frame(
Feature_ID = paste0("Gene", 1:10),
Sample1 = rnorm(10),
Sample2 = rnorm(10),
Sample3 = rnorm(10),
Sample4 = rnorm(10)
)
# Add some rows with NA values to test filtering
example_data[1, 2] <- NA
example_data[2, 3] <- NA
test_that("partial_cors returns a matrix with correct dimensions and NA diagonal", {
result <- partial_cors(example_data)
# Check that the result is a matrix
expect_true(is.matrix(result))
# Calculate the expected number of rows after filtering
filtered_data <- example_data[rowSums(is.na(example_data[, -1])) <= 0.1 * (ncol(example_data) - 2), ]
feature_mat_t <- t(filtered_data[, -c(1, ncol(filtered_data))])
feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
feature_mat_t <- as.matrix(scale(feature_mat_t))
sd_values <- apply(feature_mat_t, 2, function(x) sd(x, na.rm = TRUE))
filtered_indices <- which(sd_values > quantile(sd_values, 0.25))
expected_rows <- length(filtered_indices)
expect_equal(nrow(result), expected_rows)
expect_equal(ncol(result), expected_rows)
# Check that the diagonal contains NA
expect_true(all(is.na(diag(result))))
})
result <- partial_cors(example_data)
# Create an example dataset
set.seed(123)
example_data <- data.frame(
Feature_ID = paste0("Gene", 1:10),
Sample1 = rnorm(10),
Sample2 = rnorm(10),
Sample3 = rnorm(10),
Sample4 = rnorm(10)
)
# Add some rows with NA values to test filtering
example_data[1, 2] <- NA
example_data[2, 3] <- NA
result <- partial_cors(example_data)
Expression_mat = example_data
Expression_mat$missing_count <- rowSums(is.na(Expression_mat))
feature_mat <- subset(Expression_mat, missing_count <= 0.1 * (ncol(Expression_mat) - 2))
features <- feature_mat$Feature_ID
feature_mat_t <- t(feature_mat[, -c(1, ncol(feature_mat))])
colnames(feature_mat_t) <- features
feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
# Ensure all columns are numeric
feature_mat_t <- as.data.frame(feature_mat_t)
feature_mat_t[] <- lapply(feature_mat_t, as.numeric)
feature_mat_t <- as.matrix(feature_mat_t)
feature_mat_t <- as.matrix(scale(feature_mat_t))
sd_values <- apply(feature_mat_t, 2, function(x) sd(x, na.rm = TRUE))
filtered_indices <- which(sd_values > quantile(sd_values, 0.25))
feature_mat_t <- if (length(filtered_indices) > 20000) {
feature_mat_t[, order(sd_values[filtered_indices], decreasing = TRUE)[1:20000]]
} else {
feature_mat_t[, filtered_indices]
}
# generate covariance matrix
cov_mat = cov(as.matrix(feature_mat_t), use = "pairwise.complete.obs")
# calculate partial correlations
glassoFast_result = glassoFast::glassoFast(cov_mat, .25, thr = 1e-04,
maxIt = 10000, start = "cold",
trace = FALSE)
# extract just partial correlation result
partial_cor_mat = glassoFast_result$wi
# set diagonal values to 0; hierarchical clustering will give an error with NA diagonal values
diag(partial_cor_mat) = NA
# set row/colnames to match feature matrix
rownames(partial_cor_mat) = colnames(feature_mat_t)
# Check that the result is a matrix
expect_true(is.matrix(result))
# Calculate the expected number of rows after filtering
filtered_data <- example_data[rowSums(is.na(example_data[, -1])) <= 0.1 * (ncol(example_data) - 2), ]
View(example_data)
feature_mat_t <- t(filtered_data[, -c(1, ncol(filtered_data))])
# Calculate the expected number of rows after filtering
filtered_data <- example_data[rowSums(is.na(example_data[, -1])) <= 0.1 * (ncol(example_data) - 2), ]
feature_mat_t <- t(filtered_data[, -1])
feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
feature_mat_t <- as.matrix(scale(feature_mat_t))
sd_values <- apply(feature_mat_t, 2, function(x) sd(x, na.rm = TRUE))
filtered_indices <- which(sd_values > quantile(sd_values, 0.25))
expected_rows <- length(filtered_indices)
expect_equal(nrow(result), expected_rows)
expect_equal(ncol(result), expected_rows)
# Check that the diagonal contains NA
expect_true(all(is.na(diag(result))))
test_that("partial_cors returns a matrix with correct dimensions and NA diagonal", {
result <- partial_cors(example_data)
# Check that the result is a matrix
expect_true(is.matrix(result))
# Calculate the expected number of rows after filtering
filtered_data <- example_data[rowSums(is.na(example_data[, -1])) <= 0.1 * (ncol(example_data) - 2), ]
feature_mat_t <- t(filtered_data[, -1])
feature_mat_t <- feature_mat_t[, apply(feature_mat_t, 2, function(x) length(unique(x)) > 1)]
feature_mat_t <- as.matrix(scale(feature_mat_t))
sd_values <- apply(feature_mat_t, 2, function(x) sd(x, na.rm = TRUE))
filtered_indices <- which(sd_values > quantile(sd_values, 0.25))
expected_rows <- length(filtered_indices)
expect_equal(nrow(result), expected_rows)
expect_equal(ncol(result), expected_rows)
# Check that the diagonal contains NA
expect_true(all(is.na(diag(result))))
})
test_that("partial_cors handles missing values correctly", {
result <- partial_cors(example_data)
# Check that rows with too many NAs have been removed
expect_true(!"Gene1" %in% rownames(result))
expect_true(!"Gene2" %in% rownames(result))
})
test_that("partial_cors scales the data correctly", {
result <- partial_cors(example_data)
# Check that the data has been scaled (mean 0 and standard deviation 1)
scaled_data <- scale(t(example_data[, -c(1, ncol(example_data))]))
expect_equal(colMeans(scaled_data, na.rm = TRUE), rep(0, ncol(scaled_data)), tolerance = 1e-8)
expect_equal(apply(scaled_data, 2, sd, na.rm = TRUE), rep(1, ncol(scaled_data)), tolerance = 1e-8)
})
test_file("tests/testthat/test-fct_partial_cors.R")
devtools::test()
devtools::check()
runApp()
Imports:
roxygen2 (>= 7.3.2)
runApp()
devtools::check()
runApp()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
file.rename("LICENSE.R", "LICENSE")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/mod_module1.R")
devtools::document()
devtools::check()
devtools::document()
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
system.file("Example_data", "ccRCC4_Data", "Metab_exp.csv", package = "iModMix")
runApp('inst/shiny')
runApp()
devtools::document()
runApp()
runApp()
devtools::document()
devtools::check()
runApp()
runApp()
runApp()
runApp()
devtools::document()
devtools::check()
runApp()
runApp()
devtools::document()
devtools::check()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("enrichR")
install.packages("devtools")
library(devtools)
install_github("wjawaid/enrichR")
runApp()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
BiocManager::install("ComplexHeatmap")
runApp()
BiocManager::install("GO.db")
install.packages("tidyverse")
install.packages("ggplot2")
shiny::runApp()
install.packages('WGCNA')
BiocManager::install("preprocessCore")
library(ggplot2)
shiny::runApp()
library(enrichR)
runApp()
runApp()
# Guardar datos como archivos RDS
saveRDS(precargados_metab_exp, "inst/Example_data/ccRCC4_Data/Metab_exp.rds")
saveRDS(precargados_metab_annot, "inst/Example_data/ccRCC4_Data/Metab_annot.rds")
saveRDS(precargados_RNA_exp, "inst/Example_data/ccRCC4_Data/RNA_exp.rds")
saveRDS(precargados_RNA_annot, "inst/Example_data/ccRCC4_Data/RNA_annot.rds")
saveRDS(precargados_metadata, "inst/Example_data/ccRCC4_Data/Metadata.rds")
saveRDS(precargados_partial_cor_metab, "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNA, "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
saveRDS(precargados_enrichment, "inst/Example_data/ccRCC4_Data/Enrichment.rds")
# Guardar datos como archivos RDS
saveRDS(precargados_metab_exp, "inst/Example_data/ccRCC4_Data/Metab_exp.rds")
saveRDS(precargados_metab_annot, "inst/Example_data/ccRCC4_Data/Metab_annot.rds")
saveRDS(precargados_RNA_exp, "inst/Example_data/ccRCC4_Data/RNA_exp.rds")
# Guardar datos como archivos RDS y comprimirlos en ZIP para ccRCC4_Data
saveRDS(precargados_metab_exp, "inst/Example_data/ccRCC4_Data/Metab_exp.rds")
saveRDS(precargados_metab_annot, "inst/Example_data/ccRCC4_Data/Metab_annot.rds")
saveRDS(precargados_RNA_exp, "inst/Example_data/ccRCC4_Data/RNA_exp.rds")
saveRDS(precargados_RNA_annot, "inst/Example_data/ccRCC4_Data/RNA_annot.rds")
saveRDS(precargados_metadata, "inst/Example_data/ccRCC4_Data/Metadata.rds")
saveRDS(precargados_partial_cor_metab, "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNA, "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
saveRDS(precargados_enrichment, "inst/Example_data/ccRCC4_Data/Enrichment.rds")
zip("inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds.zip", "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
zip("inst/Example_data/ccRCC4_Data/PartialCorGenes.rds.zip", "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
# Guardar datos como archivos RDS y comprimirlos en ZIP para FloresData_K_TK
saveRDS(precargados_metab_expAll, "inst/Example_data/FloresData_K_TK/Metab_exp.rds")
saveRDS(precargados_metab_annotAll, "inst/Example_data/FloresData_K_TK/Metab_annot.rds")
saveRDS(precargados_RNA_expAll, "inst/Example_data/FloresData_K_TK/Prot_exp.rds")
saveRDS(precargados_RNA_annotAll, "inst/Example_data/FloresData_K_TK/Prot_annot.rds")
saveRDS(precargados_metadataAll, "inst/Example_data/FloresData_K_TK/Metadata.rds")
saveRDS(precargados_partial_cor_metabAll, "inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNAAll, "inst/Example_data/FloresData_K_TK/PartialCorProt.rds")
saveRDS(precargados_enrichmentAll, "inst/Example_data/FloresData_K_TK/EnrichmentMouse.rds")
zip("inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds.zip", "inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds")
zip("inst/Example_data/FloresData_K_TK/PartialCorProt.rds.zip", "inst/Example_data/FloresData_K_TK/PartialCorProt.rds")
runApp()
runApp()
runApp()
# Guardar datos como archivos RDS y comprimirlos en ZIP para ccRCC4_Data
saveRDS(precargados_metab_exp, "inst/Example_data/ccRCC4_Data/Metab_exp.rds")
saveRDS(precargados_metab_annot, "inst/Example_data/ccRCC4_Data/Metab_annot.rds")
saveRDS(precargados_RNA_exp, "inst/Example_data/ccRCC4_Data/RNA_exp.rds")
saveRDS(precargados_RNA_annot, "inst/Example_data/ccRCC4_Data/RNA_annot.rds")
saveRDS(precargados_metadata, "inst/Example_data/ccRCC4_Data/Metadata.rds")
saveRDS(precargados_partial_cor_metab, "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNA, "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
saveRDS(precargados_enrichment, "inst/Example_data/ccRCC4_Data/Enrichment.rds")
zip("inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds.zip", "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
zip("inst/Example_data/ccRCC4_Data/PartialCorGenes.rds.zip", "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
# Guardar datos como archivos RDS y comprimirlos en ZIP para FloresData_K_TK
saveRDS(precargados_metab_expAll, "inst/Example_data/FloresData_K_TK/Metab_exp.rds")
saveRDS(precargados_metab_annotAll, "inst/Example_data/FloresData_K_TK/Metab_annot.rds")
saveRDS(precargados_RNA_expAll, "inst/Example_data/FloresData_K_TK/Prot_exp.rds")
saveRDS(precargados_RNA_annotAll, "inst/Example_data/FloresData_K_TK/Prot_annot.rds")
saveRDS(precargados_metadataAll, "inst/Example_data/FloresData_K_TK/Metadata.rds")
saveRDS(precargados_partial_cor_metabAll, "inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNAAll, "inst/Example_data/FloresData_K_TK/PartialCorProt.rds")
saveRDS(precargados_enrichmentAll, "inst/Example_data/FloresData_K_TK/EnrichmentMouse.rds")
zip("inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds.zip", "inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds")
zip("inst/Example_data/FloresData_K_TK/PartialCorProt.rds.zip", "inst/Example_data/FloresData_K_TK/PartialCorProt.rds")
runApp()
# Guardar datos como archivos RDS y comprimirlos en ZIP para ccRCC4_Data
saveRDS(precargados_metab_exp, "inst/Example_data/ccRCC4_Data/Metab_exp.rds")
saveRDS(precargados_metab_annot, "inst/Example_data/ccRCC4_Data/Metab_annot.rds")
saveRDS(precargados_RNA_exp, "inst/Example_data/ccRCC4_Data/RNA_exp.rds")
saveRDS(precargados_RNA_annot, "inst/Example_data/ccRCC4_Data/RNA_annot.rds")
saveRDS(precargados_metadata, "inst/Example_data/ccRCC4_Data/Metadata.rds")
saveRDS(precargados_partial_cor_metab, "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNA, "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
saveRDS(precargados_enrichment, "inst/Example_data/ccRCC4_Data/Enrichment.rds")
zip("inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds.zip", "inst/Example_data/ccRCC4_Data/PartialCorMetabolites.rds")
zip("inst/Example_data/ccRCC4_Data/PartialCorGenes.rds.zip", "inst/Example_data/ccRCC4_Data/PartialCorGenes.rds")
# Guardar datos como archivos RDS y comprimirlos en ZIP para FloresData_K_TK
saveRDS(precargados_metab_expAll, "inst/Example_data/FloresData_K_TK/Metab_exp.rds")
saveRDS(precargados_metab_annotAll, "inst/Example_data/FloresData_K_TK/Metab_annot.rds")
saveRDS(precargados_RNA_expAll, "inst/Example_data/FloresData_K_TK/Prot_exp.rds")
saveRDS(precargados_RNA_annotAll, "inst/Example_data/FloresData_K_TK/Prot_annot.rds")
saveRDS(precargados_metadataAll, "inst/Example_data/FloresData_K_TK/Metadata.rds")
saveRDS(precargados_partial_cor_metabAll, "inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds")
saveRDS(precargados_partial_cor_RNAAll, "inst/Example_data/FloresData_K_TK/PartialCorProt.rds")
saveRDS(precargados_enrichmentAll, "inst/Example_data/FloresData_K_TK/EnrichmentMouse.rds")
zip("inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds.zip", "inst/Example_data/FloresData_K_TK/PartialCorMetabolites.rds")
zip("inst/Example_data/FloresData_K_TK/PartialCorProt.rds.zip", "inst/Example_data/FloresData_K_TK/PartialCorProt.rds")
demo_data_path <- "inst/Example_data/ccRCC4_Data"
file_path_metab_exp <- file.path(demo_data_path, "Metab_exp.rds")
precargados_metab_exp <<- readRDS(file_path_metab_exp)
# Definir funciones para cargar los datos
load_metab_exp <<- function() {
return(precargados_metab_exp)
}
View(precargados_metab_exp)
temp_dir <- tempdir()
unzip(file.path(demo_data_path, "PartialCorMetabolites.rds.zip"), exdir = temp_dir)
file_path_partial_cor_metab <- file.path(temp_dir, "PartialCorMetabolites.rds")
precargados_partial_cor_metab <<- readRDS(file_path_partial_cor_metab)
temp_dir
file_path_partial_cor_metab
precargados_partial_cor_metab
runApp()
file_path_enrichment <- file.path(demo_data_path, "Enrichment.rds")
# ccRCC4_Data
demo_data_path <- "inst/Example_data/ccRCC4_Data"
file_path_enrichment <- file.path(demo_data_path, "Enrichment.rds")
precargados_enrichment <<- readRDS(file_path_enrichment)
file_path_partial_cor_metab_zip <- file.path(demo_data_path, "PartialCorMetabolites.rds.zip")
temp_dir <- tempdir()
unzip(file_path_partial_cor_metab_zip, exdir = temp_dir)
file_path_partial_cor_metab <- file.path(temp_dir, "PartialCorMetabolites.rds")
precargados_partial_cor_metab <<- readRDS(file_path_partial_cor_metab)
temp_dir
file_path_partial_cor_metab
print(list.files(temp_dir))
file_path_partial_cor_metab <- file.path(demo_data_path, "PartialCorMetabolites.rds")
precargados_partial_cor_metab <<- readRDS(file_path_partial_cor_metab)
load_partial_cor_metab <<- function() {
return(precargados_partial_cor_metab)
}
View(load_partial_cor_metab)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(enrichR)
runApp()
curl::has_internet()
curl::has_internet()
http_proxy=http://proxy_url:proxy_port
https_proxy=https://proxy_url:proxy_port
file.edit("~/.Renviron")
Sys.setenv(http_proxy = "")
curl::has_internet()
Sys.setenv(https_proxy = "")
Sys.setenv(http_proxy = "")
curl::has_internet()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
curl::has_internet()
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
requireNamespace("enrichR", quietly = TRUE)
enrichR::listEnrichrSites()
runApp()
enrichR::listEnrichrSites()
library(enrichR)
curl::has_internet()
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
enrichR::listEnrichrSites()
httr::set_config(httr::config(ssl_verifypeer = 0L))
enrichR::listEnrichrSites()
runApp()
runApp()
Prot_enrich
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
