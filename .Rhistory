nodes <- unique(nodes)
return(list(Top_cor_Prot_metab = cor_top, #reemplazo Top_cor_Prot_metab y a filtered_cor_Prot_metab_list
Cor_list = cor_list,
Correlation_Plot = cor_listPlot, #reemplazo cor_Prot_metab_WGCNA. Debo hacer plot for each correlation
nodes = nodes,
edges = edges,
n = n))
}
eigengenes_list <- list(eigengenes_Data1, eigengenes_Data2, eigengenes_Data3)
cluster_list <- list(cluster_assig_Data1, cluster_assig_Data2, cluster_assig_Data3)
res = Modules_correlation(eigengenes_list, cluster_list, threshold = 0.5)
nodes <- as.data.frame(res$nodes)
edges <- as.data.frame(res$edges)
n  <- res$n
shapes <- c("diamond", "triangle", "dot", "square", "ellipse")
colors <- c("orange", "darkgreen", "darkblue", "purple", "darkred")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation",
shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
View(res[["Top_cor_Prot_metab"]])
network
network
Assigment_genes_enrichr <- function(cluster_assignments_ProtGenes,
database = "GO_Biological_Process_2023" ) {
websiteLive <- getOption("enrichR.live")
# Attempt to establish connection
tryCatch(
expr = {
if (websiteLive) {
enrichR::listEnrichrSites()
enrichR::setEnrichrSite("Enrichr") # Human genes
}
if (websiteLive) dbs <- enrichR::listEnrichrDbs()
},
error = function(e) {
message("Error: Unable to connect to Enrichr")
return(NULL)
}
)
dbs <- database
Genes_enrich <- cluster_assignments_ProtGenes
# New columns
Genes_enrich$enriched_Term <- NA
Genes_enrich$enriched_Overlap <- NA
Genes_enrich$enriched_Genes <- NA
Genes_enrich$enriched_P.value <- NA
Genes_enrich$enriched_Adjusted.P.value <- NA
# apply enrichr
grouped_lists <- stats::aggregate(feature_name ~ cluster, data = Genes_enrich, FUN = list)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
return(Genes_enrich)
}
dbs <- "GO_Biological_Process_2023"
Genes_enrich <- cluster_assignments_D2
Genes_enrich <- cluster_assig_Data2
# New columns
Genes_enrich$enriched_Term <- NA
Genes_enrich$enriched_Overlap <- NA
Genes_enrich$enriched_Genes <- NA
Genes_enrich$enriched_P.value <- NA
Genes_enrich$enriched_Adjusted.P.value <- NA
# apply enrichr
grouped_lists <- stats::aggregate(feature_name ~ cluster, data = Genes_enrich, FUN = list)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
websiteLive <- getOption("enrichR.live")
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
View(grouped_lists)
websiteLive <- getOption("enrichR.live")
dbs <- "GO_Biological_Process_2023"
Genes_enrich <- cluster_assig_Data3
# New columns
Genes_enrich$enriched_Term <- NA
Genes_enrich$enriched_Overlap <- NA
Genes_enrich$enriched_Genes <- NA
Genes_enrich$enriched_P.value <- NA
Genes_enrich$enriched_Adjusted.P.value <- NA
# apply enrichr
grouped_lists <- stats::aggregate(feature_name ~ cluster, data = Genes_enrich, FUN = list)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
seq_along(grouped_lists$cluster)
cluster_id <- grouped_lists$cluster[1]
feature_list <- grouped_lists$feature_name[[1]]
feature_list
enriched_result <- enrichR::enrichr(feature_list, dbs)
websiteLive <- getOption("enrichR.live")
# Attempt to establish connection
tryCatch(
expr = {
if (websiteLive) {
enrichR::listEnrichrSites()
enrichR::setEnrichrSite("Enrichr") # Human genes
}
if (websiteLive) dbs <- enrichR::listEnrichrDbs()
},
error = function(e) {
message("Error: Unable to connect to Enrichr")
return(NULL)
}
)
dbs <- "GO_Biological_Process_2023"
Genes_enrich <- cluster_assig_Data3
# New columns
Genes_enrich$enriched_Term <- NA
Genes_enrich$enriched_Overlap <- NA
Genes_enrich$enriched_Genes <- NA
Genes_enrich$enriched_P.value <- NA
Genes_enrich$enriched_Adjusted.P.value <- NA
# apply enrichr
grouped_lists <- stats::aggregate(feature_name ~ cluster, data = Genes_enrich, FUN = list)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
View(Genes_enrich)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
enriched_result <- enrichR::enrichr(feature_list, dbs)
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
requireNamespace("enrichR", quietly = TRUE)
enrichR::listEnrichrSites()
websiteLive <- getOption("enrichR.live")
# Attempt to establish connection
tryCatch(
expr = {
if (websiteLive) {
enrichR::listEnrichrSites()
enrichR::setEnrichrSite("Enrichr") # Human genes
}
if (websiteLive) dbs <- enrichR::listEnrichrDbs()
},
error = function(e) {
message("Error: Unable to connect to Enrichr")
return(NULL)
}
)
dbs <- "GO_Biological_Process_2023"
Genes_enrich <- cluster_assig_Data3
# New columns
Genes_enrich$enriched_Term <- NA
Genes_enrich$enriched_Overlap <- NA
Genes_enrich$enriched_Genes <- NA
Genes_enrich$enriched_P.value <- NA
Genes_enrich$enriched_Adjusted.P.value <- NA
# apply enrichr
grouped_lists <- stats::aggregate(feature_name ~ cluster, data = Genes_enrich, FUN = list)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[[database]]) && nrow(enriched_result[[database]]) > 0) {
term <- enriched_result[[database]][["Term"]][1]
overlap <- enriched_result[[database]][["Overlap"]][1]
Genes <- enriched_result[[database]][["Genes"]][1]
P.value <- enriched_result[[database]][["P.value"]][1]
Adjusted.P.value <- enriched_result[[database]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
View(Genes_enrich)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
if (!is.null(enriched_result[["GO_Biological_Process_2023"]]) && nrow(enriched_result[["GO_Biological_Process_2023"]]) > 0) {
term <- enriched_result[["GO_Biological_Process_2023"]][["Term"]][1]
overlap <- enriched_result[["GO_Biological_Process_2023"]][["Overlap"]][1]
Genes <- enriched_result[["GO_Biological_Process_2023"]][["Genes"]][1]
P.value <- enriched_result[["GO_Biological_Process_2023"]][["P.value"]][1]
Adjusted.P.value <- enriched_result[["GO_Biological_Process_2023"]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
}
}
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
#if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
#if (!is.null(enriched_result[["GO_Biological_Process_2023"]]) && nrow(enriched_result[["GO_Biological_Process_2023"]]) > 0) {
term <- enriched_result[["GO_Biological_Process_2023"]][["Term"]][1]
overlap <- enriched_result[["GO_Biological_Process_2023"]][["Overlap"]][1]
Genes <- enriched_result[["GO_Biological_Process_2023"]][["Genes"]][1]
P.value <- enriched_result[["GO_Biological_Process_2023"]][["P.value"]][1]
Adjusted.P.value <- enriched_result[["GO_Biological_Process_2023"]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
requireNamespace("enrichR", quietly = TRUE)
enrichR::listEnrichrSites()
websiteLive <- getOption("enrichR.live")
# Attempt to establish connection
tryCatch(
expr = {
if (websiteLive) {
enrichR::listEnrichrSites()
enrichR::setEnrichrSite("Enrichr") # Human genes
}
if (websiteLive) dbs <- enrichR::listEnrichrDbs()
},
error = function(e) {
message("Error: Unable to connect to Enrichr")
return(NULL)
}
)
dbs <- "GO_Biological_Process_2023"
Genes_enrich <- cluster_assig_Data3
# New columns
Genes_enrich$enriched_Term <- NA
Genes_enrich$enriched_Overlap <- NA
Genes_enrich$enriched_Genes <- NA
Genes_enrich$enriched_P.value <- NA
Genes_enrich$enriched_Adjusted.P.value <- NA
# apply enrichr
grouped_lists <- stats::aggregate(feature_name ~ cluster, data = Genes_enrich, FUN = list)
for (i in seq_along(grouped_lists$cluster)) {
cluster_id <- grouped_lists$cluster[i]
feature_list <- grouped_lists$feature_name[[i]]
#if (websiteLive && length(feature_list) > 0) {
enriched_result <- enrichR::enrichr(feature_list, dbs)
#if (!is.null(enriched_result[["GO_Biological_Process_2023"]]) && nrow(enriched_result[["GO_Biological_Process_2023"]]) > 0) {
term <- enriched_result[["GO_Biological_Process_2023"]][["Term"]][1]
overlap <- enriched_result[["GO_Biological_Process_2023"]][["Overlap"]][1]
Genes <- enriched_result[["GO_Biological_Process_2023"]][["Genes"]][1]
P.value <- enriched_result[["GO_Biological_Process_2023"]][["P.value"]][1]
Adjusted.P.value <- enriched_result[["GO_Biological_Process_2023"]][["Adjusted.P.value"]][1]
# Split the 'Term' column into 'enriched_Term' and 'enriched_GO'
term_parts <- strsplit(term, "\\(")[[1]]
enriched_Term <- term_parts[1]
enriched_GO <- sub("\\)$", "", term_parts[2])
# Update the new columns in the dataframe
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Term"] <- enriched_Term
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_GO"] <- enriched_GO
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Overlap"] <- overlap
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Genes"] <- Genes
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_P.value"] <- P.value
Genes_enrich[Genes_enrich$cluster == cluster_id, "enriched_Adjusted.P.value"] <- Adjusted.P.value
}
library(enrichR)
curl::has_internet()
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
requireNamespace("enrichR", quietly = TRUE)
enrichR::listEnrichrSites()
websiteLive <- getOption("enrichR.live")
# Attempt to establish connection
tryCatch(
expr = {
if (websiteLive) {
enrichR::listEnrichrSites()
enrichR::setEnrichrSite("Enrichr") # Human genes
}
if (websiteLive) dbs <- enrichR::listEnrichrDbs()
},
error = function(e) {
message("Error: Unable to connect to Enrichr")
return(NULL)
}
)
enrichR::listEnrichrSites()
enrichR::setEnrichrSite("Enrichr") # Human genes
websiteLive <- getOption("enrichR.live")
websiteLive
?getOption
websiteLive <- getOption("enrichR.live")
EnrichmentbyGenes <- read.csv("~/Documents/StewartData/EnrichmentbyGenes.csv", row.names=1)
View(EnrichmentbyGenes)
network
eigengenes_list <- list(eigengenes_Data1, eigengenes_Data2, eigengenes_Data3)
cluster_list <- list(cluster_assig_Data1, cluster_assig_Data2, cluster_assig_Data3)
res = Modules_correlation(eigengenes_list, cluster_list, threshold = 0.5)
nodes <- as.data.frame(res$nodes)
edges <- as.data.frame(res$edges)
n  <- res$n
shapes <- c("diamond", "triangle", "dot", "square", "ellipse")
colors <- c("orange", "darkgreen", "darkblue", "purple", "darkred")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation",
shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
network
View(nodes)
EnrichmentbyGenes$col <- paste0("D3", EnrichmentbyGenes$col)
nodes <- merge(nodes, EnrichmentbyGenes[, c("col", "enriched_Term")], by.x = "id", by.y = "col", all.x = TRUE)
View(nodes)
EnrichmentbyGenes <- EnrichmentbyGenes[!duplicated(EnrichmentbyGenes$col), ]
nodes <- as.data.frame(res$nodes)
edges <- as.data.frame(res$edges)
n  <- res$n
shapes <- c("diamond", "triangle", "dot", "square", "ellipse")
colors <- c("orange", "darkgreen", "darkblue", "purple", "darkred")
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation",
shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
nodes <- merge(nodes, EnrichmentbyGenes[, c("col", "enriched_Term")], by.x = "id", by.y = "col", all.x = TRUE)
nodes$enriched_Term0 <- ifelse(nchar(nodes$enriched_Term) > 20, paste0(substring(nodes$enriched_Term, 1, 20), "..."), nodes$enriched_Term)
nodes$label <- ifelse(grepl("^D3", nodes$id), paste(nodes$label, nodes$enriched_Term, sep = "\n"), nodes$label)
nodes = nodes[,1:7]
network <- visNetwork::visNetwork(nodes = nodes, edges = edges, width = "100%", height = "800px")
network <- visNetwork::visLegend(network, useGroups = FALSE,
addNodes = data.frame(label = paste0("Data", 1:n, " Modules"),
shape = shapes[1:n], color = colors[1:n]),
addEdges = data.frame(label = "Correlation",
shape = "line", length = 200, color = "darkgreen"))
network <- visNetwork::visInteraction(network, navigationButtons = TRUE)
network
library(iModMix)
run_app()
parcorData1 = precargados_partial_cor_metabAll
parcorData2 = precargados_partial_cor_RNAAll
Data1_exp = precargados_metab_expAll
#parcorData1 <- partial_cors(Data1_exp)
hcData1 <- hierarchical_cluster(parcor_mat = parcorData1, tom = TRUE, min_module_size = 10)
cluster_assig_Data1 <- cluster_assignments(as.data.frame(hcData1$cluster_assignments))
eigenData1 <- Eigengenes(Data1_exp, hcData1$cluster_assignments[,3])
eigengenes_Data1 <- eigenData1$module_eigenmetab_Me
Data2_exp = precargados_RNA_expAll
#parcorData2 <- partial_cors(Data2_exp)
hcData2 <- hierarchical_cluster(parcor_mat = parcorData2, tom = TRUE, min_module_size = 10)
cluster_assig_Data2 <- cluster_assignments(as.data.frame(hcData2$cluster_assignments))
eigenData2 <- Eigengenes(Data2_exp, hcData2$cluster_assignments[,3])
eigengenes_Data2 <- eigenData2$module_eigenmetab_Me
eigengenes_list <- list(eigengenes_Data1, eigengenes_Data2)
cluster_list <- list(hcData1$hcCluster_assignments, hcData2$hcCluster_assignments)
Integration_Data1_Data2 <- Modules_correlation(eigengenes_list, cluster_list, threshold = 0.5)
View(Integration_Data1_Data2)
View(Integration_Data1_Data2[["Top_cor_Prot_metab"]])
